Traceback (most recent call last):
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# open_1 = int(input("Harga BMRI hari ini: "))
# open_2 = int(input("Harga BMRI 1 hari sebelumnya: "))
# open_3 = int(input("Harga BMRI 2 hari sebelumnya: "))

open_values = {}
for i in best_params['lag']:
    open_values[f'open_{i}'] = int(input(f"Harga BMRI {i} hari sebelumnya: "))

last_row = np.array([
    scaler.transform([[open_values[f'open_{i}']]]).flatten()[0] for i in best_params['lag']
]).reshape(1, -1)

last_row_df = pd.DataFrame(last_row, columns=[f'open-{i}' for i in best_params['lag']])
predicted_value_normalized = best_model.predict(last_row_df)
predicted_value = scaler.inverse_transform(predicted_value_normalized.reshape(-1, 1))
last_price = open_values['open_1']
percentage_change = ((predicted_value[0][0] - last_price) / last_price) * 100
change_sign = '+' if percentage_change > 0 else ''

formatted_predicted_value = f"{predicted_value[0][0]:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
formatted_last_price = f"{last_price:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

print(f'Harga BMRI Hari ini: Rp {formatted_last_price}')
print(f'Prediksi harga BMRI Besok: Rp {formatted_predicted_value} ({change_sign}{percentage_change:.2f}%)')
------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mStdinNotImplementedError[0m                  Traceback (most recent call last)
Cell [1;32mIn[35], line 7[0m
[0;32m      5[0m open_values [38;5;241m=[39m {}
[0;32m      6[0m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m best_params[[38;5;124m'[39m[38;5;124mlag[39m[38;5;124m'[39m]:
[1;32m----> 7[0m     open_values[[38;5;124mf[39m[38;5;124m'[39m[38;5;124mopen_[39m[38;5;132;01m{[39;00mi[38;5;132;01m}[39;00m[38;5;124m'[39m] [38;5;241m=[39m [38;5;28mint[39m([38;5;28;43minput[39;49m[43m([49m[38;5;124;43mf[39;49m[38;5;124;43m"[39;49m[38;5;124;43mHarga BMRI [39;49m[38;5;132;43;01m{[39;49;00m[43mi[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m hari sebelumnya: [39;49m[38;5;124;43m"[39;49m[43m)[49m)
[0;32m      9[0m last_row [38;5;241m=[39m np[38;5;241m.[39marray([
[0;32m     10[0m     scaler[38;5;241m.[39mtransform([[open_values[[38;5;124mf[39m[38;5;124m'[39m[38;5;124mopen_[39m[38;5;132;01m{[39;00mi[38;5;132;01m}[39;00m[38;5;124m'[39m]]])[38;5;241m.[39mflatten()[[38;5;241m0[39m] [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m best_params[[38;5;124m'[39m[38;5;124mlag[39m[38;5;124m'[39m]
[0;32m     11[0m ])[38;5;241m.[39mreshape([38;5;241m1[39m, [38;5;241m-[39m[38;5;241m1[39m)
[0;32m     13[0m last_row_df [38;5;241m=[39m pd[38;5;241m.[39mDataFrame(last_row, columns[38;5;241m=[39m[[38;5;124mf[39m[38;5;124m'[39m[38;5;124mopen-[39m[38;5;132;01m{[39;00mi[38;5;132;01m}[39;00m[38;5;124m'[39m [38;5;28;01mfor[39;00m i [38;5;129;01min[39;00m best_params[[38;5;124m'[39m[38;5;124mlag[39m[38;5;124m'[39m]])

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\ipykernel\kernelbase.py:1281[0m, in [0;36mKernel.raw_input[1;34m(self, prompt)[0m
[0;32m   1279[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39m_allow_stdin:
[0;32m   1280[0m     msg [38;5;241m=[39m [38;5;124m"[39m[38;5;124mraw_input was called, but this frontend does not support input requests.[39m[38;5;124m"[39m
[1;32m-> 1281[0m     [38;5;28;01mraise[39;00m StdinNotImplementedError(msg)
[0;32m   1282[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39m_input_request(
[0;32m   1283[0m     [38;5;28mstr[39m(prompt),
[0;32m   1284[0m     [38;5;28mself[39m[38;5;241m.[39m_parent_ident[[38;5;124m"[39m[38;5;124mshell[39m[38;5;124m"[39m],
[0;32m   1285[0m     [38;5;28mself[39m[38;5;241m.[39mget_parent([38;5;124m"[39m[38;5;124mshell[39m[38;5;124m"[39m),
[0;32m   1286[0m     password[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[0;32m   1287[0m )

[1;31mStdinNotImplementedError[0m: raw_input was called, but this frontend does not support input requests.

