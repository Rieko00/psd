Traceback (most recent call last):
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# open_1 = int(input("Harga BMRI hari ini: "))
# open_2 = int(input("Harga BMRI 1 hari sebelumnya: "))
# open_3 = int(input("Harga BMRI 2 hari sebelumnya: "))

open_1 = 7025
open_2 = 7075
open_3 = 7000

last_row = np.array([
    scaler.transform([[open_1]]).flatten()[0],
    scaler.transform([[open_2]]).flatten()[0],
    scaler.transform([[open_3]]).flatten()[0]
]).reshape(1, -1)
last_row_df = pd.DataFrame(last_row, columns=['open-1', 'open-2', 'open-3'])
predicted_value_normalized = best_model.predict(last_row_df)
predicted_value = scaler.inverse_transform(predicted_value_normalized.reshape(-1, 1))
last_price = open_1
percentage_change = ((predicted_value[0][0] - last_price) / last_price) * 100
change_sign = '+' if percentage_change > 0 else ''

formatted_predicted_value = f"{predicted_value[0][0]:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')
formatted_last_price = f"{last_price:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

print(f'Harga BMRI Hari ini: Rp {formatted_last_price}')
print(f'Prediksi harga BMRI Besok: Rp {formatted_predicted_value} ({change_sign}{percentage_change:.2f}%)')
------------------

----- stderr -----
C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names
  warnings.warn(
C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names
  warnings.warn(
C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but MinMaxScaler was fitted with feature names
  warnings.warn(
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Cell [1;32mIn[35], line 15[0m
[0;32m      9[0m last_row [38;5;241m=[39m np[38;5;241m.[39marray([
[0;32m     10[0m     scaler[38;5;241m.[39mtransform([[open_1]])[38;5;241m.[39mflatten()[[38;5;241m0[39m],
[0;32m     11[0m     scaler[38;5;241m.[39mtransform([[open_2]])[38;5;241m.[39mflatten()[[38;5;241m0[39m],
[0;32m     12[0m     scaler[38;5;241m.[39mtransform([[open_3]])[38;5;241m.[39mflatten()[[38;5;241m0[39m]
[0;32m     13[0m ])[38;5;241m.[39mreshape([38;5;241m1[39m, [38;5;241m-[39m[38;5;241m1[39m)
[0;32m     14[0m last_row_df [38;5;241m=[39m pd[38;5;241m.[39mDataFrame(last_row, columns[38;5;241m=[39m[[38;5;124m'[39m[38;5;124mopen-1[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mopen-2[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mopen-3[39m[38;5;124m'[39m])
[1;32m---> 15[0m predicted_value_normalized [38;5;241m=[39m [43mbest_model[49m[38;5;241;43m.[39;49m[43mpredict[49m[43m([49m[43mlast_row_df[49m[43m)[49m
[0;32m     16[0m predicted_value [38;5;241m=[39m scaler[38;5;241m.[39minverse_transform(predicted_value_normalized[38;5;241m.[39mreshape([38;5;241m-[39m[38;5;241m1[39m, [38;5;241m1[39m))
[0;32m     17[0m last_price [38;5;241m=[39m open_1

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\sklearn\ensemble\_bagging.py:1278[0m, in [0;36mBaggingRegressor.predict[1;34m(self, X)[0m
[0;32m   1276[0m check_is_fitted([38;5;28mself[39m)
[0;32m   1277[0m [38;5;66;03m# Check data[39;00m
[1;32m-> 1278[0m X [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_data[49m[43m([49m
[0;32m   1279[0m [43m    [49m[43mX[49m[43m,[49m
[0;32m   1280[0m [43m    [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mcsr[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mcsc[39;49m[38;5;124;43m"[39;49m[43m][49m[43m,[49m
[0;32m   1281[0m [43m    [49m[43mdtype[49m[38;5;241;43m=[39;49m[38;5;28;43;01mNone[39;49;00m[43m,[49m
[0;32m   1282[0m [43m    [49m[43mforce_all_finite[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[0;32m   1283[0m [43m    [49m[43mreset[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[0;32m   1284[0m [43m[49m[43m)[49m
[0;32m   1286[0m [38;5;66;03m# Parallel loop[39;00m
[0;32m   1287[0m n_jobs, _, starts [38;5;241m=[39m _partition_estimators([38;5;28mself[39m[38;5;241m.[39mn_estimators, [38;5;28mself[39m[38;5;241m.[39mn_jobs)

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\sklearn\base.py:608[0m, in [0;36mBaseEstimator._validate_data[1;34m(self, X, y, reset, validate_separately, cast_to_ndarray, **check_params)[0m
[0;32m    537[0m [38;5;28;01mdef[39;00m [38;5;21m_validate_data[39m(
[0;32m    538[0m     [38;5;28mself[39m,
[0;32m    539[0m     X[38;5;241m=[39m[38;5;124m"[39m[38;5;124mno_validation[39m[38;5;124m"[39m,
[1;32m   (...)[0m
[0;32m    544[0m     [38;5;241m*[39m[38;5;241m*[39mcheck_params,
[0;32m    545[0m ):
[0;32m    546[0m [38;5;250m    [39m[38;5;124;03m"""Validate input data and set or check the `n_features_in_` attribute.[39;00m
[0;32m    547[0m 
[0;32m    548[0m [38;5;124;03m    Parameters[39;00m
[1;32m   (...)[0m
[0;32m    606[0m [38;5;124;03m        validated.[39;00m
[0;32m    607[0m [38;5;124;03m    """[39;00m
[1;32m--> 608[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_check_feature_names[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43mreset[49m[38;5;241;43m=[39;49m[43mreset[49m[43m)[49m
[0;32m    610[0m     [38;5;28;01mif[39;00m y [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m [38;5;129;01mand[39;00m [38;5;28mself[39m[38;5;241m.[39m_get_tags()[[38;5;124m"[39m[38;5;124mrequires_y[39m[38;5;124m"[39m]:
[0;32m    611[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[0;32m    612[0m             [38;5;124mf[39m[38;5;124m"[39m[38;5;124mThis [39m[38;5;132;01m{[39;00m[38;5;28mself[39m[38;5;241m.[39m[38;5;18m__class__[39m[38;5;241m.[39m[38;5;18m__name__[39m[38;5;132;01m}[39;00m[38;5;124m estimator [39m[38;5;124m"[39m
[0;32m    613[0m             [38;5;124m"[39m[38;5;124mrequires y to be passed, but the target y is None.[39m[38;5;124m"[39m
[0;32m    614[0m         )

File [1;32m~\AppData\Local\Programs\Python\Python312\Lib\site-packages\sklearn\base.py:535[0m, in [0;36mBaseEstimator._check_feature_names[1;34m(self, X, reset)[0m
[0;32m    530[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m missing_names [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m unexpected_names:
[0;32m    531[0m     message [38;5;241m+[39m[38;5;241m=[39m (
[0;32m    532[0m         [38;5;124m"[39m[38;5;124mFeature names must be in the same order as they were in fit.[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[0;32m    533[0m     )
[1;32m--> 535[0m [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(message)

[1;31mValueError[0m: The feature names should match those that were passed during fit.
Feature names seen at fit time, yet now missing:
- open-4
- open-5


