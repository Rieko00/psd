Traceback (most recent call last):
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\ariek\AppData\Local\Programs\Python\Python312\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
def rmse(y_true, y_pred):
    return np.sqrt(mean_squared_error(y_true, y_pred))

def grid_search(input_df, target_df, splits, lags, estimators, bootstraps, max_samples):
    best_rmse = float('inf')
    best_params = None
    graph = pd.DataFrame()
    i = 0
    for lag_value in lags:
        lag = [i for i in range(1, lag_value+1)]  
        windowed_data = sliding_window(df, lag)
        windowed_data = windowed_data[['open'] + [f'open-{i}' for i in range(1, lag_value+1)]]
        input_df = windowed_data[[f'open-{i}' for i in range(1, lag_value+1)]]
        target_df = windowed_data[['open']]
        for split in splits:
            x_train, y_train, x_test, y_test = split_data(input_df, target_df, split)
            for estimator in estimators:
                for bootstrap in bootstraps:
                    for max_sample in max_samples:
                        base_model = LinearRegression()
                        bagging_model = BaggingRegressor(estimator=base_model, n_estimators=estimator, bootstrap=bootstrap, max_samples=max_sample)
                        bagging_model.fit(x_train, y_train.values.ravel())
                        y_pred = bagging_model.predict(x_test)
                        i+=1
                        current_rmse = rmse(y_test, y_pred)
                        if current_rmse < best_rmse:
                            best_rmse = current_rmse
                            best_model = bagging_model
                            best_params = {'estimator': estimator, 'bootstrap': bootstrap, 'train_sample': split, 'max_sample': max_sample, 'lag': lag}
    return best_params, best_rmse, best_model, y_test, y_pred

lag = [3, 4, 5]
splits = [0.7, 0.75, 0.8, 0.85, 0.9]
estimators = [10, 20, 50, 100]
bootstraps = [True, False]
max_samples = [0.8, 0.9, 1.0]

best_params, best_rmse, best_model = grid_search(input_df, target_df, splits, lag , estimators, bootstraps, max_samples)


------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Cell [1;32mIn[31], line 38[0m
[0;32m     35[0m bootstraps [38;5;241m=[39m [[38;5;28;01mTrue[39;00m, [38;5;28;01mFalse[39;00m]
[0;32m     36[0m max_samples [38;5;241m=[39m [[38;5;241m0.8[39m, [38;5;241m0.9[39m, [38;5;241m1.0[39m]
[1;32m---> 38[0m best_params, best_rmse, best_model [38;5;241m=[39m grid_search(input_df, target_df, splits, lag , estimators, bootstraps, max_samples)

[1;31mValueError[0m: too many values to unpack (expected 3)

